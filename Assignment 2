#include <iostream>
#include <queue>
using namespace std;

// Patient structure
struct Patient {
    string name;
    int priority;
    int arrivalOrder;

    // Constructor
    Patient(string n, int p, int a) : name(n), priority(p), arrivalOrder(a) {}

    // Operator overloading for priority queue (Min-Heap logic)
    bool operator>(const Patient& p) const {
        if (priority == p.priority)
            return arrivalOrder > p.arrivalOrder;  // Earlier arrival gets priority
        return priority > p.priority;  // Lower number has higher priority
    }
};

// Function to determine priority based on emergency condition
int getPriority(string condition) {
    if (condition == "Heart Attack" || condition == "Stroke") return 1;
    if (condition == "Broken Leg" || condition == "Severe Burn" || condition == "Fractured Arm") return 2;
    if (condition == "Fever" || condition == "Food Poisoning" || condition == "Migraine") return 3;
    if (condition == "Mild Cold" || condition == "Small Cut") return 4;
    return 4; // Default lowest priority
}

int main() {
    priority_queue<Patient, vector<Patient>, greater<Patient>> pq;  // Min-Heap
    int arrival = 1;
    int choice;

    while (true) {
        cout << "\nMenu:\n";
        cout << "1. Add Patient\n";
        cout << "2. Show Treatment Order\n";
        cout << "3. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();  // Clear newline after integer input

        if (choice == 1) {
            string name, condition;
            cout << "Enter Patient Name: ";
            getline(cin, name);  // Use getline for full name input
            cout << "Enter Emergency Condition: ";
            getline(cin, condition);
            
            int priority = getPriority(condition);
            pq.push(Patient(name, priority, arrival));
            arrival++;
            cout << "Patient added successfully!\n";
        } 
        else if (choice == 2) {
            if (pq.empty()) {
                cout << "\nNo patients in the queue.\n";
            } else {
                cout << "\nCurrent Treatment Order:\n";
                priority_queue<Patient, vector<Patient>, greater<Patient>> tempPQ = pq;
                while (!tempPQ.empty()) {
                    Patient p = tempPQ.top();
                    tempPQ.pop();
                    cout << p.name << " (Priority: " << p.priority << ")\n";
                }
            }
        } 
        else if (choice == 3) {
            cout << "\nFinal Treatment Order:\n";
            while (!pq.empty()) {
                Patient p = pq.top();
                pq.pop();
                cout << p.name << " (Priority: " << p.priority << ")\n";
            }
            cout << "Exiting program...\n";
            break;
        } 
        else {
            cout << "Invalid choice. Please try again.\n";
        }
    }
    return 0;
}